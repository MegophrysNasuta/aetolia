{
    "attribs": {
        "isActive": "yes",
        "isFolder": "yes"
    },
    "type": "scriptgroup",
    "name": "gg",
    "packageName": null,
    "script": "gg = gg or {}\ngg.ui = gg.ui or {}\ngg.ui.refreshInterval = .1\ngg.ui.availColor = \"cyan\"\ngg.ui.infoColor = \"white\"\ngg.ui.offColor = \"grey\"\ngg.ui.roomColor = \"DarkOrange\"\ngg.ui.timeColor = \"LightSkyBlue\"\ngg.ui.oneSecWarnColor = \"red\"\ngg.ui.twoSecWarnColor = \"orange\"\ngg.ui.threeSecWarnColor = \"yellow\"\n\ngg.self = gg.self or {}\ngg.target = gg.target or {}\ngg.time = gg.time or {}\ngg.who = gg.who or {}\n\ngg.self.buffs = gg.self.buffs or {}\ngg.self.debuffs = gg.self.debuffs or {}\ngg.self.inv = gg.self.inv or {}\ngg.self.room = gg.self.room or {}\ngg.self.room.contents = gg.self.room.contents or {}\ngg.self.room.players = gg.self.room.players or {}\ngg.self.skills = gg.self.skills or {}\ngg.self.vitals = gg.self.vitals or {}\n\ngg.target.buffs = gg.target.buffs or {}\ngg.target.debuffs = gg.target.debuffs or {}\n\n\nlocal itemAttribMap = {\n    w = \"worn items\", W = \"wearable items\", l = \"wielded\",\n    g = \"groupable\", c = \"containers\", t = \"takeables\",\n    m = \"mobs\", d = \"corpses\", x = \"friendlies\", u = \"unknown items\"\n}\n\n\nfunction gg.drawUI()\n    local width, _ = getMainWindowSize()\n    setBorderBottom(100)\n    setBorderRight(width / 3)\n\n    gg.drawUIBottomPanel()\n    gg.drawUIRightPanel()\nend\n\n\nfunction gg.drawUIBottomPanel()\n    if not gg.ui.bottomPanel then\n        gg.ui.bottomPanel = Geyser.Container:new({\n            name=\"gg.ui.bottomPanel\", x=0, y=\"-100\", width=\"67%\", height=\"10%\"})\n    end\n\n    local Status = gmcp.Char.Status\n    local Vitals = gmcp.Char.Vitals\n    local color\n\n    -- bottom panel\n    -- row 1\n    if gg.self.has_balance() then color = gg.ui.availColor else color = gg.ui.offColor end\n    if not gg.ui.balBadge then\n        gg.ui.balBadge = Geyser.Label:new({\n            name=\"gg.ui.balBadge\", x=0, y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.balBadge:echo(\"<center>BAL</center>\")\n        gg.ui.balBadge:setClickCallback(function() send(\"\") end)\n    end\n\n    if gg.self.has_equilibrium() then color = gg.ui.availColor else color = gg.ui.offColor end\n    if not gg.ui.eqBadge then\n        gg.ui.eqBadge = Geyser.Label:new({\n            name=\"gg.ui.eqBadge\", x=\"7.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.eqBadge:echo(\"<center>EQ</center>\")\n        gg.ui.eqBadge:setClickCallback(function() send(\"\") end)\n    end\n\n    if gg.self.can_eat() then color = gg.ui.availColor else color = gg.ui.offColor end\n    if not gg.ui.eatBadge then\n        gg.ui.eatBadge = Geyser.Label:new({\n            name=\"gg.ui.eatBadge\", x=\"15%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.eatBadge:echo(\"<center>EAT</center>\")\n        gg.ui.eatBadge:setClickCallback(function() send(\"\") end)\n    end\n\n    if not gg.ui.focusBadge then\n        if gg.self.can_focus() then color = gg.ui.availColor else color = gg.ui.offColor end\n        gg.ui.focusBadge = Geyser.Label:new({\n            name=\"gg.ui.focusBadge\", x=\"22.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.focusBadge:echo(\"<center>FOCUS</center>\")\n        gg.ui.focusBadge:setClickCallback(function() send(\"focus\") end)\n    end\n\n    if not gg.ui.mossBadge then\n        if gg.self.can_moss() then color = gg.ui.availColor else color = gg.ui.offColor end\n        gg.ui.mossBadge = Geyser.Label:new({\n            name=\"gg.ui.mossBadge\", x=\"30%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.mossBadge:echo(\"<center>MOSS</center>\")\n        gg.ui.mossBadge:setClickCallback(function() send(\"touch moss\") end)\n    end\n\n    if not gg.ui.renewBadge then\n        if gg.self.can_renew() then color = gg.ui.availColor else color = gg.ui.offColor end\n        gg.ui.renewBadge = Geyser.Label:new({\n            name=\"gg.ui.renewBadge\", x=\"37.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.renewBadge:echo(\"<center>RENEW</center>\")\n        gg.ui.renewBadge:setClickCallback(function() send(\"renew\") end)\n    end\n\n    if not gg.ui.salveBadge then\n        if gg.self.can_salve() then color = gg.ui.availColor else color = gg.ui.offColor end\n        gg.ui.salveBadge = Geyser.Label:new({\n            name=\"gg.ui.salveBadge\", x=\"45%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.salveBadge:echo(\"<center>SALVE</center>\")\n        gg.ui.salveBadge:setClickCallback(function() send(\"\") end)\n    end\n\n    if not gg.ui.sipBadge then\n        if gg.self.can_sip() then color = gg.ui.availColor else color = gg.ui.offColor end\n        gg.ui.sipBadge = Geyser.Label:new({\n            name=\"gg.ui.sipBadge\", x=\"52.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.sipBadge:echo(\"<center>SIP</center>\")\n        gg.ui.sipBadge:setClickCallback(function() send(\"\") end)\n    end\n\n    if not gg.ui.smokeBadge then\n        if gg.self.can_smoke() then color = gg.ui.availColor else color = gg.ui.offColor end\n        gg.ui.smokeBadge = Geyser.Label:new({\n            name=\"gg.ui.smokeBadge\", x=\"60%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.smokeBadge:echo(\"<center>SMOKE</center>\")\n        gg.ui.smokeBadge:setClickCallback(function() send(\"\") end)\n    end\n\n    if not gg.ui.treeBadge then\n        if gg.self.can_tree() then color = gg.ui.availColor else color = gg.ui.offColor end\n        gg.ui.treeBadge = Geyser.Label:new({\n            name=\"gg.ui.treeBadge\", x=\"67.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n            fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.treeBadge:echo(\"<center>TREE</center>\")\n        gg.ui.treeBadge:setClickCallback(function() send(\"touch tree\") end)\n    end\n\n    if not gg.ui.lvlProgressBar then\n        gg.ui.lvlProgressBar = Geyser.Gauge:new({\n            name=\"gg.ui.lvlProgressBar\", x=\"75%\", y=0, width=\"25%\", height=33,\n            fontSize=10, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n        gg.ui.lvlProgressBar.front:setStyleSheet(\"backround-color: silver;\")\n        gg.ui.lvlProgressBar.back:setStyleSheet(\"background-color: black;\")\n    end\n    gg.ui.lvlProgressBar:setValue(tonumber(Vitals.nl), 100, \"<center>Lvl \".. Status.level ..\"</center>\")\n\n    -- row 2\n    if not gg.ui.hpBar then\n        gg.ui.hpBar = Geyser.Gauge:new({\n            name=\"gg.ui.hpBar\", x=0, y=33, width=\"32%\", height=33,\n            fontSize=10}, gg.ui.bottomPanel)\n        gg.ui.hpBar.front:setStyleSheet(\"background-color: green;\")\n        gg.ui.hpBar.back:setStyleSheet(\"background-color: black;\")\n    end\n    gg.ui.hpBar:setValue(tonumber(Vitals.hp), tonumber(Vitals.maxhp),\n                         \"<center>HP: \".. gg.round(gg.self.stats.hp(), 2) ..\"%</center>\")\n\n    if not gg.ui.mpBar then\n        gg.ui.mpBar = Geyser.Gauge:new({\n            name=\"gg.ui.mpBar\", x=\"33%\", y=33, width=\"32%\", height=33,\n            fontSize=10}, gg.ui.bottomPanel)\n        gg.ui.mpBar.front:setStyleSheet(\"background-color: navy;\")\n        gg.ui.mpBar.back:setStyleSheet(\"background-color: black;\")\n    end\n    gg.ui.mpBar:setValue(tonumber(Vitals.mp), tonumber(Vitals.maxmp),\n                         \"<center>MP: \".. gg.round(gg.self.stats.mp(), 2) ..\"%</center>\")\n\n    if not gg.ui.bloodBar then\n        gg.ui.bloodBar = Geyser.Gauge:new({\n            name=\"gg.ui.bloodBar\", x=\"66%\", y=33, width=\"32%\", height=33,\n            fontSize=10}, gg.ui.bottomPanel)\n        gg.ui.bloodBar.front:setStyleSheet(\"background-color: maroon;\")\n        gg.ui.bloodBar.back:setStyleSheet(\"background-color: black;\")\n    end\n    gg.ui.bloodBar:setValue(tonumber(Vitals.blood), 100,\n                            \"<center>Blood: \".. Vitals.blood ..\"%</center>\")\n\n    -- row 3\n    if not gg.ui.epBar then\n        gg.ui.epBar = Geyser.Gauge:new({\n            name=\"gg.ui.epBar\", x=0, y=66, width=\"32%\", height=33,\n            fontSize=10}, gg.ui.bottomPanel)\n        gg.ui.epBar.front:setStyleSheet(\"background-color: goldenrod;\")\n        gg.ui.epBar.back:setStyleSheet(\"background-color: black;\")\n    end\n    gg.ui.epBar:setValue(tonumber(Vitals.ep), tonumber(Vitals.maxep),\n                         \"<center>EP: \".. gg.round(gg.self.stats.ep(), 2) ..\"%</center>\")\n\n    if not gg.ui.wpBar then\n        gg.ui.wpBar = Geyser.Gauge:new({\n            name=\"gg.ui.wpBar\", x=\"33%\", y=66, width=\"32%\", height=33,\n            fontSize=10}, gg.ui.bottomPanel)\n        gg.ui.wpBar.front:setStyleSheet(\"background-color: purple;\")\n        gg.ui.wpBar.back:setStyleSheet(\"background-color: black;\")\n    end\n    gg.ui.wpBar:setValue(tonumber(Vitals.wp), tonumber(Vitals.maxwp),\n                         \"<center>WP: \".. gg.round(gg.self.stats.wp(), 2) ..\"%</center>\")\n\n    if not gg.ui.soulBar then\n        gg.ui.soulBar = Geyser.Gauge:new({\n            name=\"gg.ui.soulBar\", x=\"66%\", y=66, width=\"32%\", height=33,\n            fontSize=10}, gg.ui.bottomPanel)\n        gg.ui.soulBar.front:setStyleSheet(\"background-color: dodgerblue;\")\n        gg.ui.soulBar.back:setStyleSheet(\"background-color: black;\")\n    end\n    gg.ui.soulBar:setValue(tonumber(Vitals.soul), 100,\n                            \"<center>Soul: \".. Vitals.soul ..\"%</center>\")\nend\n\n\nfunction gg.drawUIRightPanel()\n    if not gg.ui.rightPanel then\n        gg.ui.rightPanel = Geyser.Container:new({\n            name=\"gg.ui.rightPanel\", x=\"-33%\", y=0, width=\"33%\", height=\"100%\"})\n    end\n\n    local RoomInfo = gmcp.Room.Info\n    local Status = gmcp.Char.Status\n    local width, height = getMainWindowSize()\n\n    -- right panel\n    -- row 1\n    if not gg.ui.nameBadge then\n        gg.ui.nameBadge = Geyser.Label:new({\n            name=\"gg.ui.nameBadge\", x=0, y=0, width=\"60%\", height=18, fontSize=10,\n            fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n        gg.ui.nameBadge:setClickCallback(function() send(\"honours \".. Status.name ) end)\n    end\n    gg.ui.nameBadge:echo(\"<center>\".. Status.fullname ..\"</center>\")\n\n    if not gg.ui.cityBadge then\n        gg.ui.cityBadge = Geyser.Label:new({\n            name=\"gg.ui.cityBadge\", x=\"60%\", y=0, width=\"40%\", height=18, fontSize=10,\n            fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n        gg.ui.cityBadge:setClickCallback(function() send(\"help \".. Status.city ) end)\n    end\n    gg.ui.cityBadge:echo(\"<center>\".. Status.city ..\"</center>\")\n\n    -- row 2\n    if not gg.ui.specBadge then\n        gg.ui.specBadge = Geyser.Label:new({\n            name=\"gg.ui.specBadge\", x=0, y=18, width=\"50%\", height=18, fontSize=10,\n            fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n        gg.ui.specBadge:setClickCallback(function() send(\"honours \".. Status.name) end)\n    end\n    gg.ui.specBadge:echo((\"<center>\".. Status.gender:title() ..\" \".. Status.spec ..\n                          \" \".. Status.race ..\" \".. Status.class ..\"</center>\"))\n\n    if not gg.ui.houseBadge then\n        gg.ui.houseBadge = Geyser.Label:new({\n            name=\"gg.ui.houseBadge\", x=\"50%\", y=18, width=\"50%\", height=18, fontSize=10,\n            fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n        gg.ui.houseBadge:setClickCallback(function() send(\"honours \".. Status.name) end)\n    end\n    gg.ui.houseBadge:echo((\"<center> Guild: \".. Status.guild ..\" Order: \"..\n                           Status.order ..\"</center>\"))\n\n    -- row 3\n    if not gg.ui.defsBadge then\n        gg.ui.defsBadge = Geyser.Label:new({\n            name=\"gg.ui.defsBadge\", x=0, y=36, width=\"25%\", height=18, fontSize=10,\n            fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n        gg.ui.defsBadge:setClickCallback(function() send(\"def\") end)\n    end\n    gg.ui.defsBadge:echo(\"<center>Defs: \".. tostring(#gg.self.buffs) ..\"</center>\")\n\n    if not gg.ui.affsBadge then\n        gg.ui.affsBadge = Geyser.Label:new({\n            name=\"gg.ui.affsBadge\", x=\"25%\", y=36, width=\"25%\", height=18, fontSize=10,\n            fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n        gg.ui.affsBadge:setClickCallback(function() send(\"diagnose\") end)\n    end\n    gg.ui.affsBadge:echo(\"<center>Affs: \".. tostring(#gg.self.debuffs) ..\"</center>\")\n\n    if not gg.ui.goldBadge then\n        gg.ui.goldBadge = Geyser.Label:new({\n            name=\"gg.ui.goldBadge\", x=\"50%\", y=36, width=\"50%\", height=18, fontSize=10,\n            fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n        gg.ui.goldBadge:setClickCallback(function() send(\"currency report\") end)\n    end\n    gg.ui.goldBadge:echo(\"<center>Gold: \" .. Status.gold ..\" - Banked: \".. Status.bank ..\"</center>\")\n\n    -- row 4\n    if not gg.ui.dateBadge then\n        gg.ui.dateBadge = Geyser.Label:new({\n            name=\"gg.ui.dateBadge\", x=0, y=54, width=\"100%\", height=18, fontSize=10,\n            fgColor=gg.ui.timeColor}, gg.ui.rightPanel)\n        gg.ui.dateBadge:setClickCallback(function() send(\"calendar\") end)\n    end\n    if gmcp.IRE and gmcp.IRE.Time then\n        gg.ui.dateBadge:echo(\"<center>\".. gg.time.date ..\"</center>\")\n    end\n\n    -- row 5\n    if not gg.ui.timeBadge then\n        gg.ui.timeBadge = Geyser.Label:new({\n            name=\"gg.ui.timeBadge\", x=0, y=72, width=\"100%\", height=18, fontSize=10,\n            fgColor=gg.ui.timeColor}, gg.ui.rightPanel)\n        gg.ui.timeBadge:setClickCallback(function() send(\"calendar\") end)\n    end\n    if gmcp.IRE and gmcp.IRE.Time then\n        gg.ui.timeBadge:echo(\"<center>\".. gg.time.time ..\"</center>\")\n    end\n\n    -- row 6\n    if not gg.ui.roomBadge then\n        gg.ui.roomBadge = Geyser.Label:new({\n            name=\"gg.ui.roomBadge\", x=0, y=90, width=\"100%\", height=18, fontSize=10,\n            fgColor=gg.ui.roomColor}, gg.ui.rightPanel)\n        gg.ui.roomBadge:setClickCallback(function() send(\"look\") end)\n    end\n\n    local exits = {}\n    for dir, roomNum in pairs(RoomInfo.exits) do exits[#exits + 1] = dir end\n    gg.ui.roomBadge:cecho((\"<center><\".. gg.ui.roomColor ..\">\".. RoomInfo.name ..\" (\"..\n                           RoomInfo.environment ..\", \".. RoomInfo.area ..\"; exits: <\"..\n                           gg.ui.infoColor ..\">\"..tostring(#exits) ..\"<\".. gg.ui.roomColor ..\n                           \">)</center>\"))\n\n    -- map\n    openMapWidget(width * .7, 250, width * .34, 400)\n\n    -- targets window\n    if not gg.ui.roomContentsWindow then\n        gg.ui.roomContentsWindow = Geyser.MiniConsole:new({\n            name=\"gg.ui.roomContentsWindow\", scrollBar=true, autoWrap=true,\n            x=width * .66, y=525, width=width * .34, height=400, fontSize=13,\n            fgColor=gg.ui.infoColor, wrapAt=80})\n    end\n    gg.ui.roomContentsWindow:clear()\n    gg.ui.roomContentsWindow:cecho(\"Players: \")\n    if gg.self.room and gg.self.room.players then\n        for _, player in ipairs(gg.self.room.players) do\n            cechoLink(\"gg.ui.roomContentsWindow\", player.name,\n                      function()\n                        send(\"honours \".. player.name)\n                        cechoLink(\"<red>[ClickToTarget] \".. player.name,\n                                  function() send(\"st \".. player.name) end, \"\", true)\n                      end, \"\", true)\n            if _ ~= #gg.self.room.players then\n                gg.ui.roomContentsWindow:cecho(\", \")\n            end\n        end\n    end\n    if gg.self.room and gg.self.room.contents then\n        for obj_type, objs in pairs(gg.self.room.contents) do\n            gg.ui.roomContentsWindow:cecho(\"\\n\\n\".. obj_type:title() ..\": \")\n            for _, obj in ipairs(objs) do\n                cechoLink(\"gg.ui.roomContentsWindow\", obj.name,\n                          function()\n                            send(\"p \".. obj.id)\n                            cechoLink(\"<red>[ClickToTarget] \".. obj.name,\n                                      function() send(\"st \".. obj.id) end, \"\", true)\n                          end, \"\", true)\n                if _ ~= #objs then\n                    gg.ui.roomContentsWindow:cecho(\", \")\n                end\n            end\n        end\n    end\nend\n\n\nfunction gg.init()\n    if not gmcp.Char or not gmcp.Room then\n        echo(\"Waiting for GMCP to fully load before initializing UI...\")\n        tempTimer(2, gg.init)\n        return\n    end\n    local Status = gmcp.Char.Status\n    local Vitals = gmcp.Char.Vitals\n\n    gg.self.bleeding = function() return Vitals.bleeding ~= \"0\" end\n    gg.self.blind = function() return Vitals.blind == \"1\" end\n    gg.self.can_eat = function() return Vitals.herb == \"1\" end\n    gg.self.can_focus = function() return Vitals.focus == \"1\" end\n    gg.self.can_moss = function() return Vitals.moss == \"1\" end\n    gg.self.can_renew = function() return Vitals.renew == \"1\" end\n    gg.self.can_salve = function() return Vitals.salve == \"1\" end\n    gg.self.can_sip = function() return Vitals.elixir == \"1\" end\n    gg.self.can_smoke = function() return Vitals.pipe == \"1\" end\n    gg.self.can_tree = function() return Vitals.tree == \"1\" end\n    gg.self.cloaked = function() return Vitals.cloak == \"1\" end\n    gg.self.deaf = function() return Vitals.deaf == \"1\" end\n    gg.self.fallen = function() return Vitals.fallen ~= \"0\" end\n    gg.self.fangbarrier = function() return Vitals.fangbarrier ~= \"0\" end\n    gg.self.has_ability_balance = function() return Vitals.ability_bal == \"1\" end\n    gg.self.has_balance = function() return Vitals.balance == \"1\" end\n    gg.self.has_equilibrium = function() return Vitals.equilibrium == \"1\" end\n    gg.self.has_left_arm = function() return Vitals.left_arm == \"1\" end\n    gg.self.has_right_arm = function() return Vitals.right_arm == \"1\" end\n    gg.self.mad = function() return Vitals.madness == \"1\" end\n    gg.self.mounted = function() return Vitals.mounted == \"1\" end\n    gg.self.phased = function() return Vitals.phased == \"1\" end\n    gg.self.prone = function() return Vitals.prone == \"1\" end\n    gg.self.writhing = function() return Vitals.writhing == \"1\" end\n\n    gg.self.build = function() return Status.spec ..\" \".. Status.race ..\" \".. Status.class end\n    gg.self.gold = function() return {banked = tonumber(Status.bank), held = tonumber(Status.gold)} end\n    gg.self.stats = {\n        hp = function() return (tonumber(Vitals.hp) / tonumber(Vitals.maxhp)) * 100 end,\n        mp = function() return (tonumber(Vitals.mp) / tonumber(Vitals.maxmp)) * 100 end,\n        ep = function() return (tonumber(Vitals.ep) / tonumber(Vitals.maxep)) * 100 end,\n        wp = function() return (tonumber(Vitals.wp) / tonumber(Vitals.maxwp)) * 100 end,\n        blood = function() return tonumber(Vitals.blood) end,\n        to_next_level = function() return tonumber(Vitals.nl) end\n    }\n    gg.self.wielding = {\n        left = function() return Vitals.wield_left end,\n        right = function() return Vitals.wield_right end\n    }\n\n    gg.setupGMCPEventHandlers()\n    gg.refreshUI()\n    gg.refreshSlowAPIs()\nend\n\n\nfunction gg.event(event, message, eventColor)\n    raiseEvent(event, message)\n    local log_message = \"\\n<white>[\"\n    if eventColor then log_message = log_message ..\"<\".. eventColor ..\">\" end\n    log_message = log_message .. event .. \"<white>] \".. (message or \"BLANK\") ..\"\\n\"\n    cecho(log_message)\nend\n\n\nfunction gg.processAffs()\n    local Afflictions = gmcp.Char.Afflictions\n    local affs = table.deepcopy(Afflictions.List)\n\n    local needToAdd = true\n    if Afflictions.Add then\n        for index, aff in ipairs(affs) do\n            if Afflictions.Add.name == aff.name then\n                needToAdd = false\n                break\n            end\n        end\n    end\n    if needToAdd then affs[#affs + 1] = Afflictions.Add end\n\n    if Afflictions.Remove then\n        for index, aff in ipairs(affs) do\n            if Afflictions.Remove[1] == aff.name then\n                table.remove(affs, index)\n                break\n            end\n        end\n    end\n\n    gg.self.debuffs = affs\nend\n\n\nfunction gg.processDefs()\n    local Defences = gmcp.Char.Defences\n    local defs = table.deepcopy(Defences.List)\n\n    local needToAdd = true\n    if Defences.Add then\n        for index, def in ipairs(defs) do\n            if Defences.Add.name == def.name then\n                needToAdd = false\n                break\n            end\n        end\n    end\n    if needToAdd then defs[#defs + 1] = Defences.Add end\n\n    if Defences.Remove then\n        for index, def in ipairs(defs) do\n            if Defences.Remove[1] == def.name then\n                table.remove(defs, index)\n                break\n            end\n        end\n    end\n\n    gg.self.buffs = defs\nend\n\n\nfunction gg.processItems(type_filter)\n    type_filter = tostring(type_filter or \"\")\n    if gmcp.Char.Items.List.location ~= type_filter then return end\n\n    local Items = gmcp.Char.Items\n    local contents = {}\n    local needToAdd = true\n\n    for _, item in ipairs(Items.List.items) do\n        local this_type_attribs = itemAttribMap[item.attrib or \"u\"]\n        contents[this_type_attribs] = contents[this_type_attribs] or {}\n        contents[this_type_attribs][#contents[this_type_attribs] + 1] = item\n        if Items.Add and Items.Add.Item and item.id == Items.Add.Item.id then needToAdd = false end\n    end\n\n    if Items.Add and Items.Add.Item and Items.Add.location == type_filter and needToAdd then\n        local item = Items.Add.item\n        local this_type_attribs = itemAttribMap[item.attrib or \"u\"]\n        contents[this_type_attribs] = contents[this_type_attribs] or {}\n        contents[this_type_attribs][#contents[this_type_attribs] + 1] = item\n    end\n\n    if Items.Remove and Items.Remove.location == type_filter then\n        local remove_item = Items.Remove.item\n        for attrib_type, subtable in pairs(contents) do\n            for index, item in ipairs(subtable) do\n                if remove_item.id == item.id then\n                    table.remove(subtable, index)\n                    break\n                end\n            end\n        end\n    end\n\n    if Items.Update and Items.Update.location == type_filter then\n        local update_item = Items.Update.item\n        local subtable = contents[itemAttribMap[update_item.attrib or \"u\"]]\n        for index, item in ipairs(subtable) do\n            if update_item.id == item.id then\n                subtable[index] = item\n                break\n            end\n        end\n    end\n\n    table.sort(contents)\n    return contents\nend\n\n\nfunction gg.processNearbyAdventurers()\n    local Room = gmcp.Room\n    local players = {}\n\n    for _, player in ipairs(Room.Players) do\n        players[#players + 1] = player.name\n    end\n\n    if Room.AddPlayer and not table.contains(players, Room.AddPlayer.name) then\n        players[#players + 1] = Room.AddPlayer.name\n    end\n\n    if Room.RemovePlayer then\n        for index, name in ipairs(players) do\n            if Room.RemovePlayer == name then\n                table.remove(players, index)\n                break\n            end\n        end\n    end\n\n    table.sort(players)\n    gg.self.room.players = players\nend\n\n\nfunction gg.processTime()\n    if not gmcp.IRE.Time then return end\n    local time = table.deepcopy(gmcp.IRE.Time.List)\n    if not time then return end\n\n    if gmcp.IRE.Time.Update then\n        for key, _ in pairs(time) do\n            local updated_value = gmcp.IRE.Time.Update[key]\n            if updated_value then time[key] = updated_value end\n        end\n    end\n\n    local ordinals = {\n        [1] = \"1st\", [2] = \"2nd\", [3] = \"3rd\",\n        [21] = \"21st\", [22] = \"22nd\", [23] = \"23rd\",\n        [31] = \"31st\"\n    }\n\n    local ordinal = ordinals[time.day] or (time.day .. \"th\")\n\n    local months = {\"Variach\", \"Severin\", \"Ios\", \"Arios\", \"Chakros\", \"Khepary\",\n                    \"Midsummer\", \"Lleian\", \"Lanosian\", \"Niuran\", \"Slyphian\", \"Haernos\"}\n    local month = tonumber(time.month)\n    time.month = months[month]\n\n    local seasons = {\n        \"mid-winter\", \"late winter\", \"early spring\",\n        \"mid-spring\", \"late spring\", \"early summer\",\n        \"mid-summer\", \"late summer\", \"early autumn\",\n        \"mid-autumn\", \"late autumn\", \"early winter\",\n    }\n    time.season = seasons[month]\n\n    time.date = (ordinal ..\" \".. time.month ..\", \".. time.year ..\n                   \" (\".. time.season ..\", \".. time.moonphase ..\")\")\n    gg.time = time\nend\n\n\nfunction gg.processWho(event, url, body)\n    if event ~= \"sysGetHttpDone\" or url ~= \"https://api.aetolia.com/characters.json\" then\n        return\n    end\n\n    local who = {}\n    for _, character in ipairs(yajl.to_value(body).characters) do\n        who[#who + 1] = character.name\n    end\n    table.sort(who)\n    gg.who = who\nend\n\n\nfunction gg.refreshUI()\n    gg.drawUI()\n    if gg.ui.updateTimer then killTimer(gg.ui.updateTimer) end\n    gg.ui.updateTimer = tempTimer(gg.ui.refreshInterval or .1, gg.refreshUI)\nend\n\nfunction gg.refreshSlowAPIs()\n    getHTTP(\"https://api.aetolia.com/characters.json\")  -- fetch who list\n    sendGMCP([[IRE.Time.Request]])  -- request time in game\n    if gg.ui.slowUpdateTimer then killTimer(gg.ui.slowUpdateTimer) end\n    gg.ui.slowUpdateTimer = tempTimer(1, gg.refreshSlowAPIs)\nend\n\n\nfunction gg.round(num, numDecimalPlaces)\n  local mult = 10^(numDecimalPlaces or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n\n\nfunction gg.setupGMCPEventHandlers()\n    local localPlayerEvents = {\"gmcp.Room.Players\", \"gmcp.Room.AddPlayer\", \"gmcp.Room.RemovePlayer\"}\n    local itemEvents = {\"gmcp.Char.Items.List\", \"gmcp.Char.Items.Add\",\n                        \"gmcp.Char.Items.Remove\", \"gmcp.Char.Items.Update\"}\n    local selfBuffEvents = {\"gmcp.Char.Defences.List\", \"gmcp.Char.Defences.Add\",\n                            \"gmcp.Char.Defences.Remove\"}\n    local selfDebuffEvents = {\"gmcp.Char.Afflictions.List\", \"gmcp.Char.Afflictions.Add\",\n                              \"gmcp.Char.Afflictions.Remove\"}\n    local timeEvents = {\"gmcp.IRE.Time.Update\", \"gmcp.IRE.Time.List\"}\n\n    for _, event in ipairs(itemEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, function()\n            gg.self.room.contents = gg.processItems(\"room\")\n        end)\n    end\n\n    for _, event in ipairs(localPlayerEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processNearbyAdventurers)\n    end\n\n    for _, event in ipairs(selfBuffEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processDefs)\n    end\n\n    for _, event in ipairs(selfDebuffEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processAffs)\n    end\n\n    sendGMCP([[Core.Supports.Add [\"IRE.Time 1\"] ]])\n    for _, event in ipairs(timeEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processTime)\n    end\n\n    deleteNamedEventHandler(\"gg\", \"characters.json\")\n    registerNamedEventHandler(\"gg\", \"characters.json\", \"sysGetHttpDone\", gg.processWho)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Room.AddPlayer\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Room.AddPlayer\", \"gmcp.Room.AddPlayer\",\n        function() gg.event(\"Player entered\", gmcp.Room.AddPlayer.name, \"gold\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Room.RemovePlayer\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Room.RemovePlayer\", \"gmcp.Room.RemovePlayer\",\n        function() gg.event(\"Player left\", gmcp.Room.RemovePlayer, \"gold\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Add\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Add\", \"gmcp.Char.Defences.Add\",\n        function() gg.event(\"Def+\", gmcp.Char.Defences.Add.name, \"SpringGreen\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Remove\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Remove\", \"gmcp.Char.Defences.Remove\",\n        function() gg.event(\"Def-\", gmcp.Char.Defences.Remove[1], \"OrangeRed\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Add\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Add\", \"gmcp.Char.Afflictions.Add\",\n        function() gg.event(\"Aff+\", gmcp.Char.Afflictions.Add.name, \"OrangeRed\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Remove\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Remove\", \"gmcp.Char.Afflictions.Remove\",\n        function() gg.event(\"Aff-\", gmcp.Char.Afflictions.Remove[1], \"SpringGreen\") end)\nend\n\n\ndeleteNamedEventHandler(\"gg.init\", \"sysConnectionEvent\")\nregisterNamedEventHandler(\"gg.init\", \"sysConnectionEvent\", \"sysConnectionEvent\", function()\n    tempTimer(2, gg.init) end)\n",
    "eventHandlerList": null
}