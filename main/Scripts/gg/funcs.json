{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "funcs",
    "packageName": null,
    "script": "function gg.event(event, message, eventColor)\n    raiseEvent(event, message)\n    local log_message = \"\\n<white>[\"\n    if eventColor then log_message = log_message ..\"<\".. eventColor ..\">\" end\n    log_message = log_message .. event .. \"<white>] \".. (message or \"BLANK\") ..\"\\n\"\n    cecho(log_message)\nend\n\n\nfunction gg.processAffs()\n    local Afflictions = gmcp.Char.Afflictions\n    local affs = table.deepcopy(Afflictions.List)\n\n    local needToAdd = true\n    if Afflictions.Add then\n        for index, aff in ipairs(affs) do\n            if Afflictions.Add.name == aff.name then\n                needToAdd = false\n                break\n            end\n        end\n    end\n    if needToAdd then affs[#affs + 1] = Afflictions.Add end\n\n    if Afflictions.Remove then\n        for index, aff in ipairs(affs) do\n            if Afflictions.Remove[1] == aff.name then\n                table.remove(affs, index)\n                break\n            end\n        end\n    end\n\n    self.debuffs = affs\nend\n\n\nfunction gg.processDefs()\n    local Defences = gmcp.Char.Defences\n    local defs = table.deepcopy(Defences.List)\n\n    local needToAdd = true\n    if Defences.Add then\n        for index, def in ipairs(defs) do\n            if Defences.Add.name == def.name then\n                needToAdd = false\n                break\n            end\n        end\n    end\n    if needToAdd then defs[#defs + 1] = Defences.Add end\n\n    if Defences.Remove then\n        for index, def in ipairs(defs) do\n            if Defences.Remove[1] == def.name then\n                table.remove(defs, index)\n                break\n            end\n        end\n    end\n\n    self.buffs = defs\nend\n\n\nfunction gg.processItems(type_filter)\n    type_filter = tostring(type_filter or \"\")\n    if gmcp.Char.Items.List.location ~= type_filter then return end\n\n    local Items = gmcp.Char.Items\n    local contents = {}\n    local needToAdd = true\n\n    for _, item in ipairs(Items.List.items) do\n        local this_type_attribs = itemAttribMap[item.attrib or \"u\"]\n        contents[this_type_attribs] = contents[this_type_attribs] or {}\n        contents[this_type_attribs][#contents[this_type_attribs] + 1] = item\n        if Items.Add and item.id == Items.Add.Item.id then needToAdd = false end\n    end\n\n    if Items.Add and Items.Add.location == type_filter and needToAdd then\n        local item = Items.Add.item\n        local this_type_attribs = itemAttribMap[item.attrib or \"u\"]\n        contents[this_type_attribs] = contents[this_type_attribs] or {}\n        contents[this_type_attribs][#contents[this_type_attribs] + 1] = item\n    end\n\n    if Items.Remove and Items.Remove.location == type_filter then\n        local remove_item = Items.Remove.item\n        for attrib_type, subtable in pairs(contents) do\n            for index, item in ipairs(subtable) do\n                if remove_item.id == item.id then\n                    table.remove(subtable, index)\n                    break\n                end\n            end\n        end\n    end\n\n    if Items.Update and Items.Update.location == type_filter then\n        local update_item = Items.Update.item\n        local subtable = contents[itemAttribMap[update_item.attrib or \"u\"]]\n        for index, item in ipairs(subtable) do\n            if update_item.id == item.id then\n                subtable[index] = item\n                break\n            end\n        end\n    end\n\n    table.sort(contents)\n    return contents\nend\n\n\nfunction gg.processNearbyAdventurers()\n    local Room = gmcp.Room\n    local players = {}\n\n    for _, player in ipairs(Room.Players) do\n        players[#players + 1] = player.name\n    end\n\n    if Room.AddPlayer and not table.contains(players, Room.AddPlayer.name) then\n        players[#players + 1] = Room.AddPlayer.name\n    end\n\n    if Room.RemovePlayer then\n        for index, name in ipairs(players) do\n            if Room.RemovePlayer == name then\n                table.remove(players, index)\n                break\n            end\n        end\n    end\n\n    table.sort(players)\n    room.players = players\nend\n\n\nfunction gg.processTime()\n    if not gmcp.IRE.Time.Update then return end\n    local time = table.deepcopy(gmcp.IRE.Time.List)\n    if not time then return end\n\n    for key, _ in pairs(time) do\n        local updated_value = gmcp.IRE.Time.Update[key]\n        if updated_value then time[key] = updated_value end\n    end\n\n    local ordinals = {\n        [1] = \"1st\", [2] = \"2nd\", [3] = \"3rd\",\n        [21] = \"21st\", [22] = \"22nd\", [23] = \"23rd\",\n        [31] = \"31st\"\n    }\n\n    local ordinal = ordinals[time.day] or (time.day .. \"th\")\n\n    local months = {\"Variach\", \"Severin\", \"Ios\", \"Arios\", \"Chakros\", \"Khepary\",\n                    \"Midsummer\", \"Lleian\", \"Lanosian\", \"Niuran\", \"Slyphian\", \"Haernos\"}\n    local month = tonumber(time.month)\n    time.month = months[month]\n\n    local seasons = {\n        \"mid-winter\", \"late winter\", \"early spring\",\n        \"mid-spring\", \"late spring\", \"early summer\",\n        \"mid-summer\", \"late summer\", \"early autumn\",\n        \"mid-autumn\", \"late autumn\", \"early winter\",\n    }\n    time.season = seasons[month]\n\n    time.date = (ordinal ..\" \".. time.month ..\", \".. time.year ..\n                   \" (\".. time.season ..\", \".. time.moonphase ..\")\")\n    gg.time = time\nend\n\n\nfunction gg.processWho(event, url, body)\n    if event ~= \"sysGetHttpDone\" or url ~= \"https://api.aetolia.com/characters.json\" then\n        return\n    end\n\n    local who = {}\n    for _, character in ipairs(yajl.to_value(body).characters) do\n        who[#who + 1] = character.name\n    end\n    table.sort(who)\n    gg.who = who\nend\n\n\nfunction gg.round(num, numDecimalPlaces)\n  local mult = 10^(numDecimalPlaces or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n\n\nlocal Status = gmcp.Char.Status\nlocal Vitals = gmcp.Char.Vitals\nlocal RoomInfo = gmcp.Room.Info\nfunction gg.drawUI()\n    local color\n    local width, height = getMainWindowSize()\n    setBorderBottom(100)\n    setBorderRight(width / 3)\n\n    gg.ui.bottomPanel = Geyser.Container:new({\n        name=\"gg.ui.bottomPanel\", x=0, y=\"-100\", width=\"67%\", height=\"10%\"})\n\n    gg.ui.rightPanel = Geyser.Container:new({\n        name=\"gg.ui.rightPanel\", x=\"-33%\", y=0, width=\"33%\", height=\"100%\"})\n\n    -- bottom panel\n    -- row 1\n    if self.can_eat() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.eatBadge = Geyser.Label:new({\n        name=\"gg.ui.eatBadge\", x=0, y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.eatBadge:echo(\"<center>EAT</center>\")\n    gg.ui.eatBadge:setClickCallback(function() send(\"\") end)\n\n    if self.can_focus() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.focusBadge = Geyser.Label:new({\n        name=\"gg.ui.focusBadge\", x=\"7.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.focusBadge:echo(\"<center>FOCUS</center>\")\n    gg.ui.focusBadge:setClickCallback(function() send(\"focus\") end)\n\n    if self.can_moss() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.mossBadge = Geyser.Label:new({\n        name=\"gg.ui.mossBadge\", x=\"15%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.mossBadge:echo(\"<center>MOSS</center>\")\n    gg.ui.mossBadge:setClickCallback(function() send(\"touch moss\") end)\n\n    if self.can_renew() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.renewBadge = Geyser.Label:new({\n        name=\"gg.ui.renewBadge\", x=\"22.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.renewBadge:echo(\"<center>RENEW</center>\")\n    gg.ui.renewBadge:setClickCallback(function() send(\"renew\") end)\n\n    if self.can_salve() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.salveBadge = Geyser.Label:new({\n        name=\"gg.ui.salveBadge\", x=\"30%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.salveBadge:echo(\"<center>SALVE</center>\")\n    gg.ui.salveBadge:setClickCallback(function() send(\"\") end)\n\n    if self.can_sip() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.sipBadge = Geyser.Label:new({\n        name=\"gg.ui.sipBadge\", x=\"37.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.sipBadge:echo(\"<center>SIP</center>\")\n    gg.ui.sipBadge:setClickCallback(function() send(\"\") end)\n\n    if self.can_smoke() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.smokeBadge = Geyser.Label:new({\n        name=\"gg.ui.smokeBadge\", x=\"45%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.smokeBadge:echo(\"<center>SMOKE</center>\")\n    gg.ui.smokeBadge:setClickCallback(function() send(\"\") end)\n\n    if self.can_tree() then color = gg.ui.availColor else color = gg.ui.offColor end\n    gg.ui.treeBadge = Geyser.Label:new({\n        name=\"gg.ui.treeBadge\", x=\"52.5%\", y=0, width=\"7.5%\", height=33, fontSize=10,\n        fgColor=color, bgColor=\"transparent\"}, gg.ui.bottomPanel)\n    gg.ui.treeBadge:echo(\"<center>TREE</center>\")\n    gg.ui.treeBadge:setClickCallback(function() send(\"touch tree\") end)\n\n    -- row 2\n    gg.ui.hpBar = Geyser.Gauge:new({\n        name=\"gg.ui.hpBar\", x=0, y=33, width=\"32%\", height=33,\n        fontSize=10}, gg.ui.bottomPanel)\n    gg.ui.hpBar:setValue(tonumber(Vitals.hp), tonumber(Vitals.maxhp),\n                         \"<center>HP: \".. gg.round(self.stats.hp(), 2) ..\"%</center>\")\n    gg.ui.hpBar.front:setStyleSheet(\"background-color: green;\")\n    gg.ui.hpBar.back:setStyleSheet(\"background-color: black;\")\n\n    gg.ui.mpBar = Geyser.Gauge:new({\n        name=\"gg.ui.mpBar\", x=\"33%\", y=33, width=\"32%\", height=33,\n        fontSize=10}, gg.ui.bottomPanel)\n    gg.ui.mpBar:setValue(tonumber(Vitals.mp), tonumber(Vitals.maxmp),\n                         \"<center>MP: \".. gg.round(self.stats.mp(), 2) ..\"%</center>\")\n    gg.ui.mpBar.front:setStyleSheet(\"background-color: navy;\")\n    gg.ui.mpBar.back:setStyleSheet(\"background-color: black;\")\n\n    gg.ui.bloodBar = Geyser.Gauge:new({\n        name=\"gg.ui.bloodBar\", x=\"66%\", y=33, width=\"32%\", height=33,\n        fontSize=10}, gg.ui.bottomPanel)\n    gg.ui.bloodBar:setValue(tonumber(Vitals.blood), 100,\n                            \"<center>Blood: \".. Vitals.blood ..\"%</center>\")\n    gg.ui.bloodBar.front:setStyleSheet(\"background-color: maroon;\")\n    gg.ui.bloodBar.back:setStyleSheet(\"background-color: black;\")\n\n    -- row 3\n    gg.ui.epBar = Geyser.Gauge:new({\n        name=\"gg.ui.epBar\", x=0, y=66, width=\"32%\", height=33,\n        fontSize=10}, gg.ui.bottomPanel)\n    gg.ui.epBar:setValue(tonumber(Vitals.ep), tonumber(Vitals.maxep),\n                         \"<center>EP: \".. gg.round(self.stats.ep(), 2) ..\"%</center>\")\n    gg.ui.epBar.front:setStyleSheet(\"background-color: goldenrod;\")\n    gg.ui.epBar.back:setStyleSheet(\"background-color: black;\")\n\n    gg.ui.wpBar = Geyser.Gauge:new({\n        name=\"gg.ui.wpBar\", x=\"33%\", y=66, width=\"32%\", height=33,\n        fontSize=10}, gg.ui.bottomPanel)\n    gg.ui.wpBar:setValue(tonumber(Vitals.wp), tonumber(Vitals.maxwp),\n                         \"<center>WP: \".. gg.round(self.stats.wp(), 2) ..\"%</center>\")\n    gg.ui.wpBar.front:setStyleSheet(\"background-color: purple;\")\n    gg.ui.wpBar.back:setStyleSheet(\"background-color: black;\")\n\n    gg.ui.soulBar = Geyser.Gauge:new({\n        name=\"gg.ui.soulBar\", x=\"66%\", y=66, width=\"32%\", height=33,\n        fontSize=10}, gg.ui.bottomPanel)\n    gg.ui.soulBar:setValue(tonumber(Vitals.soul), 100,\n                            \"<center>Soul: \".. Vitals.soul ..\"%</center>\")\n    gg.ui.soulBar.front:setStyleSheet(\"background-color: dodgerblue;\")\n    gg.ui.soulBar.back:setStyleSheet(\"background-color: black;\")\n\n    -- right panel\n    -- row 1\n    gg.ui.nameBadge = Geyser.Label:new({\n        name=\"gg.ui.nameBadge\", x=0, y=0, width=\"60%\", height=18, fontSize=10,\n        fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n    gg.ui.nameBadge:echo(\"<center>\".. Status.fullname ..\"</center>\")\n    gg.ui.nameBadge:setClickCallback(function() send(\"honours \".. Status.name ) end)\n\n    gg.ui.cityBadge = Geyser.Label:new({\n        name=\"gg.ui.cityBadge\", x=\"60%\", y=0, width=\"40%\", height=18, fontSize=10,\n        fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n    gg.ui.cityBadge:echo(\"<center>\".. Status.city ..\"</center>\")\n    gg.ui.cityBadge:setClickCallback(function() send(\"help \".. Status.city ) end)\n\n    -- row 2\n    gg.ui.specBadge = Geyser.Label:new({\n        name=\"gg.ui.specBadge\", x=0, y=18, width=\"50%\", height=18, fontSize=10,\n        fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n    gg.ui.specBadge:echo((\"<center>\".. Status.gender:title() ..\" \".. Status.spec ..\n                          \" \".. Status.race ..\" \".. Status.class ..\"</center>\"))\n    gg.ui.specBadge:setClickCallback(function() send(\"honours \".. Status.name) end)\n\n    gg.ui.houseBadge = Geyser.Label:new({\n        name=\"gg.ui.houseBadge\", x=\"50%\", y=18, width=\"50%\", height=18, fontSize=10,\n        fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n    gg.ui.houseBadge:echo((\"<center> Guild: \".. Status.guild ..\" Order: \"..\n                           Status.order ..\"</center>\"))\n    gg.ui.houseBadge:setClickCallback(function() send(\"honours \".. Status.name) end)\n\n    -- row 3\n    gg.ui.newsBadge = Geyser.Label:new({\n        name=\"gg.ui.newsBadge\", x=0, y=36, width=\"25%\", height=18, fontSize=10,\n        fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n    gg.ui.newsBadge:echo(\"<center>Unread news: \".. Status.unread_news ..\"</center>\")\n    gg.ui.newsBadge:setClickCallback(function() send(\"nstat\") end)\n\n    gg.ui.msgsBadge = Geyser.Label:new({\n        name=\"gg.ui.msgsBadge\", x=\"25%\", y=36, width=\"25%\", height=18, fontSize=10,\n        fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n    gg.ui.msgsBadge:echo(\"<center>Unread msgs: \".. Status.unread_msgs ..\"</center>\")\n    gg.ui.msgsBadge:setClickCallback(function() send(\"rmsg\") end)\n\n    gg.ui.goldBadge = Geyser.Label:new({\n        name=\"gg.ui.goldBadge\", x=\"50%\", y=36, width=\"50%\", height=18, fontSize=10,\n        fgColor=gg.ui.infoColor}, gg.ui.rightPanel)\n    gg.ui.goldBadge:echo(\"<center>Gold: \" .. Status.gold ..\" - Banked: \".. Status.bank ..\"</center>\")\n    gg.ui.goldBadge:setClickCallback(function() send(\"currency report\") end)\n\n    -- row 4\n    local exits = {}\n    for dir, roomNum in pairs(RoomInfo.exits) do exits[#exits + 1] = dir end\n    gg.ui.roomBadge = Geyser.Label:new({\n        name=\"gg.ui.roomBadge\", x=0, y=54, width=\"100%\", height=18, fontSize=10,\n        fgColor=gg.ui.roomColor}, gg.ui.rightPanel)\n    gg.ui.roomBadge:cecho((\"<center><\".. gg.ui.roomColor ..\">\".. RoomInfo.name ..\" (\"..\n                           RoomInfo.environment ..\", \".. RoomInfo.area ..\"; exits: <\"..\n                           gg.ui.infoColor ..\">\"..tostring(#exits) ..\"<\".. gg.ui.roomColor ..\n                           \">)</center>\"))\n    gg.ui.roomBadge:setClickCallback(function() send(\"look\") end)\n\n    -- map\n    openMapWidget(width * .7, 214, width * .34, height * .25)\nend\n\n\nfunction gg.refreshUI()\n    gg.drawUI()\n    if gg.ui.updateTimer then killTimer(gg.ui.updateTimer) end\n    gg.ui.updateTimer = tempTimer(gg.ui.refreshInterval or .1, gg.refreshUI)\nend\n\n\nfunction gg.setupGMCPEventHandlers()\n    local localPlayerEvents = {\"gmcp.Room.Players\", \"gmcp.Room.AddPlayer\", \"gmcp.Room.RemovePlayer\"}\n    local itemEvents = {\"gmcp.Char.Items.List\", \"gmcp.Char.Items.Add\",\n                        \"gmcp.Char.Items.Remove\", \"gmcp.Char.Items.Update\"}\n    local selfBuffEvents = {\"gmcp.Char.Defences.List\", \"gmcp.Char.Defences.Add\",\n                            \"gmcp.Char.Defences.Remove\"}\n    local selfDebuffEvents = {\"gmcp.Char.Afflictions.List\", \"gmcp.Char.Afflictions.Add\",\n                              \"gmcp.Char.Afflictions.Remove\"}\n    local timeEvents = {\"gmcp.IRE.Time.Update\", \"gmcp.IRE.Time.List\"}\n\n    for _, event in ipairs(itemEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, function()\n            room.contents = gg.processItems(\"room\")\n        end)\n    end\n\n    for _, event in ipairs(localPlayerEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processNearbyAdventurers)\n    end\n\n    for _, event in ipairs(selfBuffEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processDefs)\n    end\n\n    for _, event in ipairs(selfDebuffEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processAffs)\n    end\n\n    sendGMCP([[Core.Supports.Add [\"IRE.Time 1\"] ]])\n    for _, event in ipairs(timeEvents) do\n        deleteNamedEventHandler(\"gg\", event)\n        registerNamedEventHandler(\"gg\", event, event, gg.processTime)\n    end\n\n    deleteNamedEventHandler(\"gg\", \"characters.json\")\n    registerNamedEventHandler(\"gg\", \"characters.json\", \"sysGetHttpDone\", gg.processWho)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Room.AddPlayer\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Room.AddPlayer\", \"gmcp.Room.AddPlayer\",\n        function() gg.event(\"Player entered\", gmcp.Room.AddPlayer.name, \"gold\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Room.RemovePlayer\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Room.RemovePlayer\", \"gmcp.Room.RemovePlayer\",\n        function() gg.event(\"Player left\", gmcp.Room.RemovePlayer, \"gold\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Add\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Add\", \"gmcp.Char.Defences.Add\",\n        function() gg.event(\"Def+\", gmcp.Char.Defences.Add.name, \"SpringGreen\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Remove\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Defences.Remove\", \"gmcp.Char.Defences.Remove\",\n        function() gg.event(\"Def-\", gmcp.Char.Defences.Remove[1], \"OrangeRed\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Add\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Add\", \"gmcp.Char.Afflictions.Add\",\n        function() gg.event(\"Aff+\", gmcp.Char.Afflictions.Add.name, \"OrangeRed\") end)\n\n    deleteNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Remove\")\n    registerNamedEventHandler(\"gg.event\", \"gmcp.Char.Afflictions.Remove\", \"gmcp.Char.Afflictions.Remove\",\n        function() gg.event(\"Aff-\", gmcp.Char.Afflictions.Remove[1], \"SpringGreen\") end)\n\n    gg.refreshUI()\nend",
    "eventHandlerList": null
}