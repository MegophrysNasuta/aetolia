{
    "attribs": {
        "isActive": "yes",
        "isFolder": "no"
    },
    "type": "script",
    "name": "init",
    "packageName": null,
    "script": "gg = gg or {}\n\ngg.self = gg.self or {}\ngg.target = gg.target or {}\ngg.time = gg.time or {}\ngg.who = gg.who or {}\n\ngg.self.buffs = gg.self.buffs or {}\ngg.self.debuffs = gg.self.debuffs or {}\ngg.self.inv = gg.self.inv or {}\ngg.self.room = gg.self.room or {}\ngg.self.room.contents = gg.self.room.contents or {}\ngg.self.room.players = gg.self.room.players or {}\ngg.self.skills = gg.self.skills or {}\ngg.self.vitals = gg.self.vitals or {}\n\ngg.target.buffs = gg.target.buffs or {}\ngg.target.debuffs = gg.target.debuffs or {}\n\nlocal self = gg.self\nlocal target = gg.target\n\nlocal room = self.room\n\nlocal itemAttribMap = {\n    w = \"worn items\", W = \"wearable items\", l = \"wielded\",\n    g = \"groupable\", c = \"containers\", t = \"takeables\",\n    m = \"mobs\", d = \"corpses\", x = \"friendlies\", u = \"unknown items\"\n}\n\n\nfunction gg.processAffs()\n    local Afflictions = gmcp.Char.Afflictions\n    local affs = table.deepcopy(Afflictions.List)\n\n    if not table.contains(affs, Afflictions.Add) then\n        affs[#affs + 1] = Afflictions.Add\n    end\n\n    for index, aff in ipairs(affs) do\n        if Afflictions.Remove.name == aff.name then\n            table.remove(affs, index)\n            break\n        end\n    end\n\n    self.debuffs = affs\nend\n\n\nfunction gg.processDefs()\n    local Defences = gmcp.Char.Defences\n    local defs = table.deepcopy(Defences.List)\n\n    if not table.contains(defs, Defences.Add) then\n        defs[#defs + 1] = Defences.Add\n    end\n\n    for index, def in ipairs(defs) do\n        if Defences.Remove.name == def.name then\n            table.remove(defs, index)\n            break\n        end\n    end\n\n    self.buffs = defs\nend\n\n\nfunction gg.processItems(type_filter)\n    type_filter = tostring(type_filter or \"\")\n    if gmcp.Char.Items.List.location ~= type_filter then return end\n\n    local Items = gmcp.Char.Items\n    local contents = {}\n    local needToAdd = true\n\n    for _, item in ipairs(Items.List.items) do\n        if item.location == type_filter then\n            local this_type_attribs = itemAttribMap[item.attrib or \"u\"]\n            contents[this_type_attribs][#contents[this_type_attribs] + 1] = item\n            if item.id == Items.add.item.id then needToAdd = false end\n        end\n    end\n\n    if Items.Add.location == type_filter and needToAdd then\n        local item = Items.Add.item\n        local this_type_attribs = itemAttribMap[item.attrib or \"u\"]\n        contents[this_type_attribs][#contents[this_type_attribs] + 1] = item\n    end\n\n    if Items.Remove.location == type_filter then\n        local remove_item = Items.Remove.item\n        for attrib_type, subtable in pairs(contents) do\n            for index, item in ipairs(subtable) do\n                if remove_item.id == item.id then\n                    table.remove(subtable, index)\n                    break\n                end\n            end\n        end\n    end\n\n    if Items.Update.location == type_filter then\n        local update_item = Items.Update.item\n        local subtable = contents[itemAttribMap[update_item.attrib or \"u\"]]\n        for index, item in ipairs(subtable) do\n            if update_item.id == item.id then\n                subtable[index] = item\n                break\n            end\n        end\n    end\n\n    return contents\nend\n\n\nfunction gg.processNearbyAdventurers()\n    local Room = gmcp.Room\n    local players = {}\n\n    for _, player in ipairs(Room.Players) do\n        players[#players + 1] = player.name\n    end\n\n    if not table.contains(players, Room.AddPlayer.name) then\n        players[#players + 1] = Room.AddPlayer.name\n    end\n\n    for index, name in ipairs(players) do\n        if Room.RemovePlayer.name == name then\n            table.remove(players, index)\n            break\n        end\n    end\n\n    room.players = table.sort(players)\nend\n\n\nfunction gg.processTime()\n    local time = table.deepcopy(gmcp.IRE.Time.List)\n    if not time then return end\n\n    for key, _ in pairs(time) do\n        local updated_value = gmcp.IRE.Time.Update[key]\n        if updated_value then time[key] = updated_value end\n    end\n\n    local ordinals = {\n        [1] = \"1st\", [2] = \"2nd\", [3] = \"3rd\",\n        [21] = \"21st\", [22] = \"22nd\", [23] = \"23rd\",\n        [31] = \"31st\"\n    }\n\n    local ordinal = ordinals[time.day] or (time.day .. \"th\")\n\n    local seasons = {\n        \"mid-winter\", \"late winter\", \"early spring\",\n        \"mid-spring\", \"late spring\", \"early summer\",\n        \"mid-summer\", \"late summer\", \"early autumn\",\n        \"mid-autumn\", \"late autumn\", \"early winter\",\n    }\n\n    time.string = (ordinal ..\" \".. time.month ..\", \".. time.year ..\n                   \" (\".. seasons[tonumber(time.mon)] ..\", \".. time.moonphase ..\n                   \")<br>\" .. time.time)\n    gg.time = time\nend\n\n\nfunction gg.processWho(event, url, body)\n    if event ~= \"SysGetHttpDone\" or url ~= \"https://api.aetolia.com/characters.json\" then\n        return\n    end\n\n    gg.who = yajl.to_value(body).characters\nend\n\n\nfunction gg.setupGMCPEventHandlers()\n    local localPlayerEvents = {\"gmcp.Room.Players\", \"gmcp.Room.AddPlayer\", \"gmcp.Room.RemovePlayer\"}\n    local itemEvents = {\"gmcp.Char.Items.List\", \"gmcp.Char.Items.Add\",\n                        \"gmcp.Char.Items.Remove\", \"gmcp.Char.Items.Update\"}\n    local selfBuffEvents = {\"gmcp.Char.Defences.List\", \"gmcp.Char.Defences.Add\",\n                            \"gmcp.Char.Defences.Remove\"}\n    local selfDebuffEvents = {\"gmcp.Char.Afflictions.List\", \"gmcp.Char.Afflictions.Add\",\n                              \"gmcp.Char.Afflictions.Remove\"}\n\n    for _, event in ipairs(itemsEvents) do\n        registerAnonymousEventHandler(event, function() gg.processItems(\"room\") end)\n    end\n\n    for _, event in ipairs(localPlayerEvents) do\n        registerAnonymousEventHandler(event, gg.processNearbyAdventurers)\n    end\n\n    for _, event in ipairs(selfBuffEvents) do\n        registerAnonymousEventHandler(event, gg.processDefs)\n    end\n\n    for _, event in ipairs(selfDebuffEvents) do\n        registerAnonymousEventHandler(event, gg.processAffs)\n    end\n\n    sendGMCP([[Core.Supports.Add [\"IRE.Time 1\"] ]])\n    registerAnonymousEventHandler(\"gmcp.IRE.Time.Update\", gg.ProcessTime)\n\n    registerAnonymousEventHandler(\"sysGetHttpDone\", gg.processWho)\nend\n",
    "eventHandlerList": null
}